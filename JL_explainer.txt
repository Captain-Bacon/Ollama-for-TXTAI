I'm trying to trace the order of execution.

it's LLM.py,  create the LLM class, initialise it with the def init function. 
 def __init__(self, path=None, method=None, **kwargs)
self.generator = GenerationFactory.create(path, method, **kwargs)

 inputs: path, method, kwargs
 returns fn with path, method, kwargs

That then runs the generationfactory.create, (factory.py)
    def create(path, method, **kwargs):
    kwargs.update({'method': 'ollama'}), return Ollama(path, **kwargs)

 which for the ollama class returns as Ollama class instantiated in ollama.py with the path and kwargs AND IF Ollama method then adds method to the kwargs.  
 Effectively this sets the generator as the ollama class, and initialises it.




 LLM class
 init
  GenerationFactory.create - path method kwargs

 def create(path, method, **kwargs):
                            method = GenerationFactory.method(path, method)
                                       def method(path, method):
                                        elif Ollama.ismodel(path): 
                            method = "ollama"
                            return method
return Ollama(path, **kwargs)  #forced 'method' into kwargs



the LLM class is intiated in llm.py, init function is run which executes the self.generator.  That calls the create method from the factory,.py.

That derives the variable 'method' from the 'method' method, which calls the ismodel method of the Ollama class which returns true, so continues the 'method' method and returns 'method' to the create method of the class, which then uses is to return the class Ollama with (path, kwargs).

The init method finishes having set the generator to the Ollama class.

Now, where I'm getting confused is that I don't know where the script 'goes' next?  I can see that the generator is used in the _call_ of the llm.py LLM Class, but I don't see where or how the _call_ function is called?
